@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.SessionStorage.ISyncSessionStorageService syncSessionStorage
@inject NavigationManager navigate
@inject ILoginService LoginService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="Index">BPIWebApplication <span class="version-number" aria-hidden="true">v1.0</span></a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="(() => ToggleNavMenu(new()))">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass sidebar main-sidebar">
    <nav class="flex-column wrapper">
        <div class="nav-item px-2" @onclick="(() => ToggleNavMenu(new()))">
            <NavLink class="nav-link" href="index">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <hr class="w-100" />

        <div class="sidebarContentWrap">

            @if (childApplications != null)
            {
                @foreach (var ca in childApplications)
                {
                    <li class="nav-header text-white my-2">@ca.ChildApplicationName</li>
                    @*<div class="nav-item px-2 trigger-button">
                        <NavLink class="nav-link dropdown-toggle">
                            <span class="@ca.icon" aria-hidden="true"></span> @ca.ChildApplicationName
                        </NavLink>
                    </div>*@
                    @if (userModuleCategories != null)
                    {
                        @* Mod *@
                        var mCatID = userModuleCategories.Where(x => x.ChildApplicationId == ca.ChildApplicationId).GroupBy(x => x.moduleCategoryId).Select(x => x.FirstOrDefault()).OrderBy(x => x.moduleCategoryId).ToList();

                        @if (mCatID != null)
                        {
                            @foreach (var mc in mCatID)
                            {
                                var mID = module.Where(x => x.childApplicationId == ca.ChildApplicationId && x.moduleCategoryId == mc.moduleCategoryId).OrderBy(x => x.moduleId).ToList();

                                <div class="nav-item px-2 trigger-button">
                                    <NavLink class="nav-link dropdown-toggle" @onclick="(() => toggleMainMenu(mc))">
                                        <span class="oi oi-file" aria-hidden="true"></span> @mc.moduleCategoryName
                                    </NavLink>
                                </div>

                                if (expandMainMenu && mc.moduleCategoryId == clickedMainMenuId)
                                {
                                    @foreach (var um in mID)
                                    {
                                        <div class="nav-item px-4" @onclick="(() => ToggleNavMenu(um))">
                                            <NavLink class="nav-link" href="@um.url">
                                                <span class="@um.icon" aria-hidden="true"></span> @um.moduleName
                                            </NavLink>
                                        </div>
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
        </div>

        <hr class="w-100" />

        <div class="nav-item px-2 logoutlink trigger-button">
            <NavLink class="nav-link" @onclick="confirmLogout">
                <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </NavLink>
        </div>
    </nav>
</div>
